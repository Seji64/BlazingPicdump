@page "/picdump/{Hash}"
@using Microsoft.EntityFrameworkCore
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime jsRuntime
@inject NetworkState NetworkState
@implements IDisposable

<MudToolBar>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.ArrowBack" OnClick="@(() => BackToPreviousPage())">Back</MudButton>
    <MudSpacer />
</MudToolBar>
<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudGrid Justify="Justify.Center">

        @if (error_IdNotFoundInDb)
        {
            <MudAlert Severity="Severity.Error">@($"Leider ist ein Fehler aufgetreten. Der Picdump mit der Id '{Hash}' wurde nicht gefunden")</MudAlert>
        }
        else if (!NetworkState.IsOnline && networkNeeded)
        {
            <MudAlert Severity="Severity.Warning">Sorry, hier gibt es nichts zu sehen, da due aktuell Offline bist</MudAlert>
        }
        else
        {
            @if (picdump != null && picdump.Images != null && picdump.Images.Any())
            {
                @foreach (Image image in picdump.Images)
                {
                    @if (string.IsNullOrEmpty(image.Url))
                    {
                        <MudItem xs="12">
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="400px" Width="330px" />
                        </MudItem>
                    }
                    else
                    {
                        <MudItem xs="12">
                            <MudImage Fluid="true" Src=@(image.Url) Class="rounded-lg" Elevation="25" />
                        </MudItem>
                    }

                }
            }
            else
            {
                for (int i = 0; i < imagePlaceholderCount; i++)
                {
                    <MudItem xs="12">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="400px" Width="330px" />
                    </MudItem>
                }
            }
        }


    </MudGrid>
    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
    </MudScrollToTop>

</MudContainer>
<MudToolBar>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.ArrowBack" OnClick="@(() => BackToPreviousPage())">Back</MudButton>
    <MudSpacer />
</MudToolBar>

@code {

    [Parameter]
    public string? Hash { get; set; }
    private long? Id { get; set; }

    Picdump? picdump = null;
    bool error_IdNotFoundInDb = false;
    bool networkNeeded = false;
    int imagePlaceholderCount = 8;

    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnParametersSetAsync()
    {

        if (Hash != null)
        {
            await GetPicDumpImages();
        }
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }

    private async Task BackToPreviousPage()
    {
        await jsRuntime.InvokeVoidAsync("history.back");
    }

    private async Task GetPicDumpImages()
    {

        using (var db = new PicdumpDbContext())
        {
            picdump = db.Picdumps.AsNoTracking().Include(x => x.Images).SingleOrDefault(x => x.Hash == Hash);
        }

        if (picdump != null && !string.IsNullOrEmpty(picdump.BaseURL))
        {
            if (picdump.Images != null && picdump.Images.Any())
            {
                StateHasChanged();
            }
            else
            {
                networkNeeded = true;
                if (NetworkState.IsOnline)
                {
                    try
                    {
                        var httpClient = ClientFactory.CreateClient("Picdump");
                        var response = await httpClient.GetAsync($"/{picdump.BaseURL}");
                        response.EnsureSuccessStatusCode();

                        var content = await response.Content.ReadAsStringAsync();
                        var imgLinks = Helper.GetPicdumpImageUrls(content);
                        var token = cancellationTokenSource.Token;

                        picdump.Images = new();

                        imgLinks.AsParallel().ForAll(x =>
                        {
                            var imageFileName = System.IO.Path.GetFileName(x);
                            picdump.Images.Add(new Image() { Name = imageFileName });
                        });

                        await System.Threading.Tasks.Parallel.ForEachAsync(imgLinks, async (imgLink, token) =>
                        {
                            var ImghttpClient = ClientFactory.CreateClient("Picdump");
                            var imageFileName = System.IO.Path.GetFileName(imgLink);
                            var base64Payload = await Helper.DownloadImageAsBase64($"/{imgLink}", ImghttpClient, cancellationTokenSource.Token);
                            picdump.Images.Single(x => x.Name == imageFileName).Url = $"data:image/png;base64,{base64Payload}";
                            StateHasChanged();
                        });

                        using (var db = new PicdumpDbContext())
                        {
                            var picdumpdb = await db.Picdumps.Include(x => x.Images).SingleAsync(x => x.Id == picdump.Id);

                            picdumpdb.Images = new();
                            picdumpdb.Images.AddRange(picdump.Images);
                            db.Update(picdumpdb);
                            await db.SaveToCacheAsync();
                        }

                    }
                    catch (TaskCanceledException)
                    {
                        Log.Debug("Task was cancled");
                    }
                    catch (Exception ex)
                    {
                        Snackbar.Add("Fehler: Picdump Bilder konnten nicht geladen werden!", Severity.Error);
                        Log.Error("{ErrorMessage}",ex.Message);
                    }
                }
            }


        }
        else
        {
            error_IdNotFoundInDb = true;
            Log.Error("no picdump found in db with ID/hash {Hash}",Hash);
        }
    }
}
