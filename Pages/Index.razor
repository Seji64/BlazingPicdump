@page "/"
@inject ISnackbar Snackbar
@using System.Net.Http
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject NetworkState NetworkState
@implements IDisposable



<MudToolBar>
    <MudSpacer />
    <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.Refresh" OnClick="@(() => Refresh())" Disabled="@_loading" >Refresh</MudButton>    
</MudToolBar>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">

    <MudGrid Justify="Justify.SpaceEvenly">

    @if(Picdumps is null || !Picdumps.Any())
    {
        for (int i = 0; i < 8; i++)
        {
            <MudItem xs="6" sm="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudSkeleton SkeletonType="SkeletonType.Text" Animation="Animation.Wave" Width="80%" />
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent class="d-flex flex-row flex-grow-1 gap-2 align-center">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Width="100px" />
                        <MudSkeleton SkeletonType="SkeletonType.Text" Animation="Animation.Wave" Width="80%" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2" />
                        <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
    else
    {
        @foreach(var picdump in Picdumps)
        {
            <MudItem xs="12" sm="6" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@picdump.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <BlazingPicdump.Components.Network>
                                <Online>
                                    @if (!picdump.IsOfflineAvailable)
                                    {
                                        @if (PicdumpOfflineProcessIsRunning.Contains(picdump.Id))
                                        {
                                            <MudProgressCircular Class="mt-1 mr-2" Size="Size.Small" Indeterminate="true"/>
                                        }
                                        else
                                        {
                                            <MudTooltip Text="Für Offline nutzung herunterladen">
                                                <MudIconButton Icon="@Icons.Material.Outlined.DownloadForOffline" Color="Color.Default" aria-label="DownloadForOffline" OnClick="@(() => DownloadPicdump(picdump))" />
                                            </MudTooltip>    
                                            }
                                        }
                                        else
                                        {
                                            <MudTooltip Text="Offlinekopie löschen">
                                                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" aria-label="DeleteOfflineCache" OnClick="@(() => DeleteOfflinePicdump(picdump))" />
                                            </MudTooltip>
                                        }
                                </Online>
                                <Offline>
                                    if (picdump.IsOfflineAvailable)
                                    {
                                        <MudTooltip Text="Offlinekopie löschen">
                                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" aria-label="DeleteOfflineCache" OnClick="@(() => DeleteOfflinePicdump(picdump))" />
                                        </MudTooltip>
                                    }
                                </Offline>
                            </BlazingPicdump.Components.Network>

                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent class="d-flex flex-row flex-grow-1 gap-2 align-center">
                            <MudImage Src=@(picdump.Thumbnail?.Url) Fluid="true" Class="rounded-lg"/>
                            <MudText Typo="Typo.body2">@picdump.Description)</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudTooltip Text="Picdump anzeigen">
                            <BlazingPicdump.Components.Network>
                                <Online>
                                    <MudIconButton Icon="@Icons.Material.Outlined.PlayArrow" Color="Color.Info" OnClick="@(() => NavigateToPicdump(picdump))" aria-label="Picdump anzeigen"/>
                                </Online>
                                <Offline>
                                    <MudIconButton Icon="@Icons.Material.Outlined.PlayArrow" Color="Color.Info" OnClick="@(() => NavigateToPicdump(picdump))" aria-label="Picdump anzeigen" Disabled=@(picdump.IsOfflineAvailable == false)/>
                                </Offline>
                            </BlazingPicdump.Components.Network>
                            
                        </MudTooltip>
                         <MudTooltip Text="Teilen">
                             <BlazingPicdump.Components.Network>
                                 <Online>
                                     <MudIconButton Icon="@Icons.Material.Outlined.Share" Color="Color.Tertiary" aria-label="Teilen"/>
                                 </Online>
                                 <Offline>
                                     <MudIconButton Icon="@Icons.Material.Outlined.Share" Color="Color.Tertiary" aria-label="Teilen" Disabled="true"/>
                                 </Offline>
                             </BlazingPicdump.Components.Network>
                             
                         </MudTooltip>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
    </MudGrid>
    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Outlined.ArrowCircleUp" />
    </MudScrollToTop>
</MudContainer>


@code
{
    private bool _loading = false;
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private List<long> PicdumpOfflineProcessIsRunning { get; set; } = new();
    private List<Picdump>? Picdumps;

    private void NavigateToPicdump(Picdump picdump)
    {
        NavigationManager.NavigateTo($"picdump/{picdump.Hash}");
    }
    private async Task Refresh(bool dbonly = false)
    {
        _loading = true;
        Picdumps = new();

        if (NetworkState.IsOnline && dbonly == false)
        {
            try
            {
                var onlinePicdumps = await GetAvailibePicdumps();
                if (onlinePicdumps != null && onlinePicdumps.Any())
                {
                    try
                    {
                        using (var db = new PicdumpDbContext())
                        {

                            Picdumps = await db.Picdumps.AsNoTracking().Include(x => x.Thumbnail).Include(i => i.Images).ToListAsync();
                            var cancellationToken = cancellationTokenSource.Token;

                            await Parallel.ForEachAsync(onlinePicdumps, async (onlinePicdump, cancellationToken) =>
                            {
                                var hashDupFromDb = Picdumps.SingleOrDefault(x => x.Hash == onlinePicdump.Hash);
                                if (hashDupFromDb is null)
                                {
                                    Log.Debug("Not found in DB! => Adding");
                                    onlinePicdump.PublishDate = await Helper.GetPicdumpDate(ClientFactory.CreateClient("Picdump"), onlinePicdump.BaseURL!);
                                    db.Picdumps.Add(onlinePicdump);
                                }
                            });
                            await db.SaveToCacheAsync();
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Error("{ErrorMessage}", ex.Message);
                    }
                }
                else
                {
                    Log.Warning("online fetch did not return any picdumps");
                }
            }
            catch (Exception ex)
            {
                Log.Error("{ErrorMessage}",ex.Message);
            }
            finally
            {
                StateHasChanged();
            }
        }

        using (var db = new PicdumpDbContext())
        {
            Picdumps = await db.Picdumps.AsNoTracking().Include(x => x.Thumbnail).Include(i => i.Images).OrderByDescending(x => x.PublishDate).ToListAsync();
        }

        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task<List<Picdump>> GetAvailibePicdumps()
    {
        HttpClient httpClient = ClientFactory.CreateClient("Picdump");

        var response = await httpClient.GetAsync("/http://www.bildschirmarbeiter.com/plugs/category/pics");
        response.EnsureSuccessStatusCode();
        var mainContent = await response.Content.ReadAsStringAsync();
        var picdumps =  await Helper.GetPicdumpOverview(mainContent, httpClient, cancellationTokenSource.Token);

        return picdumps;
    }

    private async Task DeleteOfflinePicdump(Picdump picdump)
    {
        using (var db = new PicdumpDbContext())
        {
            var dbpicdump = await db.Picdumps.Include(i => i.Images).Include(t => t.Thumbnail).SingleOrDefaultAsync(x => x.Id == picdump.Id);
            if (dbpicdump != null)
            {
                db.Picdumps.Remove(dbpicdump);
                await db.SaveToCacheAsync();
            }
        }
        await Refresh();
    }

    private async Task DownloadPicdump(Picdump picdump)
    {
        string? baseUrl = string.Empty;

        PicdumpOfflineProcessIsRunning.Add(picdump.Id);

        try
        {
            using (var db = new PicdumpDbContext())
            {
                baseUrl = db.Picdumps.AsNoTracking().Select(x => new { x.BaseURL,x.Id }).SingleOrDefault(x => x.Id == picdump.Id)?.BaseURL;
            }

            if (!string.IsNullOrEmpty(baseUrl))
            {
                var images = await Helper.GetAllPicdumpImages(baseUrl, ClientFactory.CreateClient("Picdump"), cancellationTokenSource.Token);
                using (var db = new PicdumpDbContext())
                {
                    var picdumpdb = db.Picdumps.Include(i => i.Images).Single(x => x.Id == picdump.Id);

                    picdumpdb.Images = new();
                    picdumpdb.Images.AddRange(images);

                    db.Picdumps.Update(picdumpdb);
                    await db.SaveToCacheAsync();
                }

                Snackbar.Add($"Picdump '{picdump.Name}' komplett heruntergeladen!",Severity.Success);
            }
            else
            {
                throw new Exception("Picdump not found in database!");
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler: Picdump '{picdump.Name}' konnte nicht heruntergeladen werden!",Severity.Error);
            Log.Error("{ErrorMessage}", ex.Message);
        }
        finally
        {
            PicdumpOfflineProcessIsRunning.Remove(picdump.Id);
            await Refresh(true);
        }

    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
    }